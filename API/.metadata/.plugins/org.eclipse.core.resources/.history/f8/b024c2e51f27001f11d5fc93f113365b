package com.vehiclerentalservices.app.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.vehiclerentalservices.app.entities.CustomerEntity;
import com.vehiclerentalservices.app.services.CustomerService;

@RestController
@RequestMapping("/vehicleRentalServices")
public class CustomerController {
	
	@Autowired
	private CustomerService customerService;
	
	//get all customer
	@GetMapping("/customer")
	public ResponseEntity<List<CustomerEntity>> getAllCutomer() {
		List<CustomerEntity> customer = customerService.getAllCustomer();
		if(customer.size()<=0) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.of(Optional.of(customer));
	}
	
	//get customer by id
	@GetMapping("/customer/{id}")
	public ResponseEntity<CustomerEntity> getCustomerById(@PathVariable int id) {
		CustomerEntity customer = customerService.getCustomerById(id);
		if(customer== null) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.of(Optional.of(customer));
	}
	
	//add customer
	@PostMapping("/customer")
	public ResponseEntity<CustomerEntity> createCustomer(@RequestBody CustomerEntity customer) {
		CustomerEntity addCustomer = null;
		try {
			addCustomer = customerService.addCustomer(customer);
			return ResponseEntity.of(Optional.of(addCustomer));
		}catch(Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
	}
	
	//delete customer
	@DeleteMapping("/customer/{id}")
	public void deleteCustomer(@PathVariable int id) {
			customerService.deleteCustomer(id);
	}
	
	//update customer
	@PutMapping("/customer/{id}")
	public CustomerEntity updateCustomer(@RequestBody CustomerEntity customer, @PathVariable int id) {
	 
		
		CustomerEntity updatedCustomer = customerService.updateCustomer(customer, id);
		return updateCustomer;
		
	}

}












